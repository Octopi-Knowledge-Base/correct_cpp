#!/bin/bash

qmake > /dev/null

##########################################
# Test release version
##########################################
make release > /dev/null

n_errors=0

if [[ ! -f main ]]; then 
  echo "Incorrect: code does not compile cleanly with high warning levels"
  ((++n_errors))
fi

#####################
# Test exit states
#####################

./main > /dev/null
state_zero=`echo $?`

./main 1 > /dev/null
state_one=`echo $?`

./main nonsense > /dev/null
state_nonsense=`echo $?`

./main 1 2 > /dev/null
state_one_two=`echo $?`

if [[ ! $state_zero -eq 1 ]]; then
  echo "Incorrect: './is_perfect' should return exit state 1, as one argument is needed"
  ((++n_errors))
fi

if [[ ! $state_one -eq 0 ]]; then
  echo "Incorrect: './is_perfect 1' should return exit state 0, as 1 is an integer"
  ((++n_errors))
fi

if [[ ! $state_nonsense -eq 1 ]]; then
  echo "Incorrect: './is_perfect nonsense' should return exit state 1, as 'nonsense' is no integer"
  ((++n_errors))
fi

if [[ ! $state_one_two -eq 1 ]]; then
  echo "Incorrect: './is_perfect 1 2' should return exit state 1, as there are two arguments"
  ((++n_errors))
fi

#####################
# Test output
#####################

# Create expected result
echo "false" > expected_0.txt
echo "false" > expected_1.txt
echo "false" > expected_2.txt
echo "true" > expected_6.txt
echo "false" > expected_12.txt
echo "true" > expected_28.txt

# Create the actual result
./main 0 > created_0.txt
./main 1 > created_1.txt
./main 2 > created_2.txt
./main 6 > created_6.txt
./main 12 > created_12.txt
./main 28 > created_28.txt

# Compare results
if ! cmp --silent created_0.txt expected_0.txt; then
  echo "Incorrect: './is_perfect 0' should literally display 'false', followed by a newline"
  ((++n_errors))
fi

if ! cmp --silent created_1.txt expected_1.txt; then
  echo "Incorrect: './is_perfect 1' should literally display 'false', followed by a newline"
  ((++n_errors))
fi

if ! cmp --silent created_2.txt expected_2.txt; then
  echo "Incorrect: './is_perfect 2' should literally display 'false', followed by a newline"
  ((++n_errors))
fi

if ! cmp --silent created_6.txt expected_6.txt; then
  echo "Incorrect: './is_perfect 6' should literally display 'false', followed by a newline"
  ((++n_errors))
fi

if ! cmp --silent created_12.txt expected_12.txt; then
  echo "Incorrect: './is_perfect 12' should literally display 'false', followed by a newline"
  ((++n_errors))
fi

if ! cmp --silent created_28.txt expected_28.txt; then
  echo "Incorrect: './is_perfect 28' should literally display 'true', followed by a newline"
  ((++n_errors))
fi

rm expected_*.txt
rm created_*.txt

##########################################
# C++ guidelines
##########################################

./check_cpp_core_guidelines
state_core_guidelines=`echo $?`

if [[ ! $state_core_guidelines -eq 0 ]]; then
  # No need to be verbose here, 'check_cpp_core_guidelines' already does so 
  ((++n_errors))
fi

./check_course_guidelines
state_course_guidelines=`echo $?`

if [[ ! $state_course_guidelines -eq 0 ]]; then
  # No need to be verbose here, 'check_course_guidelines' already does so 
  ((++n_errors))
fi

./check_doc
state_doc=`echo $?`

if [[ ! $state_doc -eq 0 ]]; then
  # No need to be verbose here, 'check_doc' already does so 
  ((++n_errors))
fi

##########################################
# Test debug version
##########################################
make debug > /dev/null
./main

#####################
# Test code coverage
#####################

n=`gcov -n -o debug *.cpp| head -n 2 | tail -n 1 | egrep "100\.00\%" | wc -l`
if [ ! "$n" -eq "1" ]; then
  echo "Incorrect: must have 100% code coverage. Current code coverage:"
  gcov -n -o debug *.cpp | head -n 2 | tail -n 1
  ((++n_errors))
fi

exit $n_errors
